<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="646.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="629" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="629" > </text>
<g id="frames">
<g >
<title>vma_prepare (84,740 samples, 0.02%)</title><rect x="33.8" y="293" width="0.2" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="36.78" y="303.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="565" width="4.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1188.19" y="575.5" ></text>
</g>
<g >
<title>read (98,349,487 samples, 18.24%)</title><rect x="936.5" y="421" width="215.2" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="939.46" y="431.5" >read</text>
</g>
<g >
<title>ext4_file_read_iter (2,177,033 samples, 0.40%)</title><rect x="981.0" y="325" width="4.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="984.01" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (8,694,371 samples, 1.61%)</title><rect x="10.0" y="485" width="19.0" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="13.00" y="495.5" ></text>
</g>
<g >
<title>__fdget_pos (4,379,496 samples, 0.81%)</title><rect x="971.4" y="325" width="9.6" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="974.43" y="335.5" ></text>
</g>
<g >
<title>path_init (2,186,156 samples, 0.41%)</title><rect x="596.5" y="261" width="4.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="599.50" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::close (94,442,570 samples, 17.51%)</title><rect x="691.9" y="469" width="206.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="694.95" y="479.5" >std::basic_filebuf&lt;char, st..</text>
</g>
<g >
<title>do_vmi_munmap (84,740 samples, 0.02%)</title><rect x="33.8" y="341" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="36.78" y="351.5" ></text>
</g>
<g >
<title>__close_nocancel (2,170,319 samples, 0.40%)</title><rect x="76.0" y="437" width="4.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="78.97" y="447.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (8,694,371 samples, 1.61%)</title><rect x="10.0" y="517" width="19.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::close (90,078,028 samples, 16.70%)</title><rect x="701.5" y="453" width="197.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="704.50" y="463.5" >std::__basic_file&lt;char&gt;::..</text>
</g>
<g >
<title>fclose@@GLIBC_2.2.5 (85,842,318 samples, 15.92%)</title><rect x="710.8" y="437" width="187.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="713.77" y="447.5" >fclose@@GLIBC_2.2.5</text>
</g>
<g >
<title>__rcu_read_unlock (2,188,466 samples, 0.41%)</title><rect x="388.9" y="181" width="4.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="391.92" y="191.5" ></text>
</g>
<g >
<title>do_user_addr_fault (749,391 samples, 0.14%)</title><rect x="34.0" y="469" width="1.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="36.98" y="479.5" ></text>
</g>
<g >
<title>_IO_file_finish@@GLIBC_2.2.5 (2,179,314 samples, 0.40%)</title><rect x="715.6" y="421" width="4.7" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="718.57" y="431.5" ></text>
</g>
<g >
<title>our_mnt (4,353,748 samples, 0.81%)</title><rect x="492.4" y="133" width="9.5" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="495.42" y="143.5" ></text>
</g>
<g >
<title>inode_permission (2,172,792 samples, 0.40%)</title><rect x="316.0" y="229" width="4.7" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="318.97" y="239.5" ></text>
</g>
<g >
<title>std::ios_base::_M_call_callbacks (2,194,463 samples, 0.41%)</title><rect x="898.6" y="485" width="4.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="901.60" y="495.5" ></text>
</g>
<g >
<title>do_syscall_64 (74,923,029 samples, 13.89%)</title><rect x="729.9" y="389" width="164.0" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="732.91" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>ext4_release_file (2,167,246 samples, 0.40%)</title><rect x="804.4" y="309" width="4.7" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="807.35" y="319.5" ></text>
</g>
<g >
<title>lockref_get_not_zero (1,611,535 samples, 0.30%)</title><rect x="1096.3" y="261" width="3.6" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1099.34" y="271.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (93,850 samples, 0.02%)</title><rect x="33.8" y="549" width="0.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="36.78" y="559.5" ></text>
</g>
<g >
<title>std::codecvt&lt;char, char, __mbstate_t&gt;::do_always_noconv (2,183,254 samples, 0.40%)</title><rect x="1166.0" y="437" width="4.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1169.04" y="447.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (2,172,985 samples, 0.40%)</title><rect x="29.0" y="533" width="4.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="32.02" y="543.5" ></text>
</g>
<g >
<title>__legitimize_path (2,168,015 samples, 0.40%)</title><rect x="277.9" y="213" width="4.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="280.94" y="223.5" ></text>
</g>
<g >
<title>filemap_get_read_batch (4,378,082 samples, 0.81%)</title><rect x="1051.0" y="245" width="9.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1054.03" y="255.5" ></text>
</g>
<g >
<title>__close_nocancel (74,923,029 samples, 13.89%)</title><rect x="729.9" y="421" width="164.0" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="732.91" y="431.5" >__close_nocancel</text>
</g>
<g >
<title>__x64_sys_close (64,886,789 samples, 12.03%)</title><rect x="751.9" y="357" width="142.0" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="754.87" y="367.5" >__x64_sys_close</text>
</g>
<g >
<title>syscall_return_via_sysret (2,197,561 samples, 0.41%)</title><rect x="1146.9" y="405" width="4.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1149.85" y="415.5" ></text>
</g>
<g >
<title>mod_memcg_state (4,366,699 samples, 0.81%)</title><rect x="847.9" y="213" width="9.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="850.86" y="223.5" ></text>
</g>
<g >
<title>locks_remove_posix (2,192,356 samples, 0.41%)</title><rect x="889.1" y="341" width="4.8" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="892.06" y="351.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1,394,394 samples, 0.26%)</title><rect x="1093.3" y="261" width="3.0" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1096.29" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (2,194,311 samples, 0.41%)</title><rect x="1170.8" y="469" width="4.8" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="1173.81" y="479.5" ></text>
</g>
<g >
<title>fscrypt_file_open (4,368,057 samples, 0.81%)</title><rect x="360.3" y="197" width="9.5" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="363.27" y="207.5" ></text>
</g>
<g >
<title>update_wall_time (2,185,156 samples, 0.41%)</title><rect x="506.7" y="53" width="4.8" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="509.72" y="63.5" ></text>
</g>
<g >
<title>dl_main (1,188,590 samples, 0.22%)</title><rect x="35.6" y="517" width="2.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="38.62" y="527.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::fd (2,188,571 samples, 0.41%)</title><rect x="1151.7" y="421" width="4.8" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1154.66" y="431.5" ></text>
</g>
<g >
<title>std::locale::locale (2,198,642 samples, 0.41%)</title><rect x="687.1" y="469" width="4.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="690.14" y="479.5" ></text>
</g>
<g >
<title>__libc_start_call_main (524,170,649 samples, 97.20%)</title><rect x="38.2" y="533" width="1147.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="41.23" y="543.5" >__libc_start_call_main</text>
</g>
<g >
<title>aa_path_perm (45,069,412 samples, 8.36%)</title><rect x="403.3" y="181" width="98.6" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="406.32" y="191.5" >aa_path_perm</text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::open (272,713,963 samples, 50.57%)</title><rect x="66.5" y="453" width="596.8" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="69.52" y="463.5" >std::__basic_file&lt;char&gt;::open</text>
</g>
<g >
<title>vm_munmap (84,740 samples, 0.02%)</title><rect x="33.8" y="373" width="0.2" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="36.78" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="421" width="0.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="40.31" y="431.5" ></text>
</g>
<g >
<title>apparmor_file_open (49,464,954 samples, 9.17%)</title><rect x="393.7" y="197" width="108.2" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="396.71" y="207.5" >apparmor_file..</text>
</g>
<g >
<title>lockref_put_return (2,189,044 samples, 0.41%)</title><rect x="610.8" y="245" width="4.8" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="613.83" y="255.5" ></text>
</g>
<g >
<title>mntput_no_expire (2,182,071 samples, 0.40%)</title><rect x="615.6" y="229" width="4.8" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="618.62" y="239.5" ></text>
</g>
<g >
<title>security_file_alloc (10,946,518 samples, 2.03%)</title><rect x="174.7" y="229" width="23.9" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="177.66" y="239.5" >s..</text>
</g>
<g >
<title>kmem_cache_free (4,365,709 samples, 0.81%)</title><rect x="869.9" y="293" width="9.6" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="872.92" y="303.5" ></text>
</g>
<g >
<title>security_inode_permission (2,193,591 samples, 0.41%)</title><rect x="567.8" y="245" width="4.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="570.82" y="255.5" ></text>
</g>
<g >
<title>[unknown] (10,867,356 samples, 2.02%)</title><rect x="10.0" y="549" width="23.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >[..</text>
</g>
<g >
<title>syscall_exit_to_user_mode (2,204,841 samples, 0.41%)</title><rect x="966.6" y="373" width="4.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="969.60" y="383.5" ></text>
</g>
<g >
<title>fopen@@GLIBC_2.2.5 (266,222,831 samples, 49.37%)</title><rect x="80.7" y="437" width="582.6" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="83.72" y="447.5" >fopen@@GLIBC_2.2.5</text>
</g>
<g >
<title>_start (524,170,649 samples, 97.20%)</title><rect x="38.2" y="565" width="1147.0" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="41.23" y="575.5" >_start</text>
</g>
<g >
<title>__rcu_read_lock (2,178,651 samples, 0.40%)</title><rect x="843.1" y="229" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="846.09" y="239.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (2,191,432 samples, 0.41%)</title><rect x="922.5" y="357" width="4.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="925.47" y="367.5" ></text>
</g>
<g >
<title>_dl_sysdep_start (1,188,590 samples, 0.22%)</title><rect x="35.6" y="533" width="2.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="38.62" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (78,012,730 samples, 14.47%)</title><rect x="959.8" y="389" width="170.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="962.83" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,185,156 samples, 0.41%)</title><rect x="506.7" y="181" width="4.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="509.72" y="191.5" ></text>
</g>
<g >
<title>lookup_fast (2,177,460 samples, 0.40%)</title><rect x="591.7" y="245" width="4.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="594.73" y="255.5" ></text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (6,566,513 samples, 1.22%)</title><rect x="208.2" y="229" width="14.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="211.17" y="239.5" ></text>
</g>
<g >
<title>_IO_un_link (2,158,916 samples, 0.40%)</title><rect x="706.0" y="437" width="4.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="709.04" y="447.5" ></text>
</g>
<g >
<title>std::istream::read (2,200,265 samples, 0.41%)</title><rect x="1180.4" y="501" width="4.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="1183.37" y="511.5" ></text>
</g>
<g >
<title>apparmor_file_alloc_security (4,368,775 samples, 0.81%)</title><rect x="165.1" y="229" width="9.6" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="168.10" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,185,156 samples, 0.41%)</title><rect x="506.7" y="165" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="509.72" y="175.5" ></text>
</g>
<g >
<title>get_page_from_freelist (416,038 samples, 0.08%)</title><rect x="37.3" y="309" width="0.9" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="40.31" y="319.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::_M_allocate_internal_buffer (2,193,330 samples, 0.41%)</title><rect x="663.3" y="453" width="4.8" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="666.26" y="463.5" ></text>
</g>
<g >
<title>_find_next_zero_bit (2,190,289 samples, 0.41%)</title><rect x="620.4" y="277" width="4.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="623.40" y="287.5" ></text>
</g>
<g >
<title>ima_file_check (10,847,408 samples, 2.01%)</title><rect x="282.7" y="245" width="23.7" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="285.68" y="255.5" >i..</text>
</g>
<g >
<title>path_name (23,495,596 samples, 4.36%)</title><rect x="450.5" y="165" width="51.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="453.53" y="175.5" >path_..</text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (113,496,484 samples, 21.05%)</title><rect x="922.5" y="453" width="248.3" height="15.0" fill="rgb(205,4,0)" rx="2" ry="2" />
<text  x="925.47" y="463.5" >std::basic_streambuf&lt;char, std::c..</text>
</g>
<g >
<title>bprm_execve (93,850 samples, 0.02%)</title><rect x="33.8" y="469" width="0.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="36.78" y="479.5" ></text>
</g>
<g >
<title>_IO_file_fopen@@GLIBC_2.2.5 (264,024,071 samples, 48.96%)</title><rect x="85.5" y="421" width="577.8" height="15.0" fill="rgb(237,148,35)" rx="2" ry="2" />
<text  x="88.53" y="431.5" >_IO_file_fopen@@GLIBC_2.2.5</text>
</g>
<g >
<title>entry_SYSCALL_64 (2,172,985 samples, 0.40%)</title><rect x="29.0" y="485" width="4.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="32.02" y="495.5" ></text>
</g>
<g >
<title>search_binary_handler (93,850 samples, 0.02%)</title><rect x="33.8" y="421" width="0.2" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="36.78" y="431.5" ></text>
</g>
<g >
<title>std::__basic_file&lt;char&gt;::xsgetn (4,380,101 samples, 0.81%)</title><rect x="1156.5" y="421" width="9.5" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1159.45" y="431.5" ></text>
</g>
<g >
<title>update_process_times (2,191,432 samples, 0.41%)</title><rect x="922.5" y="325" width="4.8" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="925.47" y="335.5" ></text>
</g>
<g >
<title>lockref_put_return (2,184,122 samples, 0.41%)</title><rect x="794.8" y="293" width="4.8" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="797.82" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_openat (248,720,151 samples, 46.12%)</title><rect x="114.2" y="325" width="544.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="117.24" y="335.5" >__x64_sys_openat</text>
</g>
<g >
<title>handle_mm_fault (749,391 samples, 0.14%)</title><rect x="34.0" y="453" width="1.6" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="36.98" y="463.5" ></text>
</g>
<g >
<title>step_into (2,175,745 samples, 0.40%)</title><rect x="606.1" y="261" width="4.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="609.07" y="271.5" ></text>
</g>
<g >
<title>prepend (3,900,162 samples, 0.72%)</title><rect x="483.9" y="85" width="8.5" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="486.88" y="95.5" ></text>
</g>
<g >
<title>aa_file_perm (4,377,740 samples, 0.81%)</title><rect x="1116.1" y="261" width="9.6" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1119.14" y="271.5" ></text>
</g>
<g >
<title>exc_page_fault (749,391 samples, 0.14%)</title><rect x="34.0" y="485" width="1.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="36.98" y="495.5" ></text>
</g>
<g >
<title>getname (10,849,355 samples, 2.01%)</title><rect x="625.2" y="293" width="23.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="628.19" y="303.5" >g..</text>
</g>
<g >
<title>read_tsc (2,185,156 samples, 0.41%)</title><rect x="506.7" y="37" width="4.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="509.72" y="47.5" ></text>
</g>
<g >
<title>handle_mm_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="437" width="0.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="40.31" y="447.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (253,084,030 samples, 46.93%)</title><rect x="104.7" y="373" width="553.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="107.69" y="383.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>x64_sys_call (4,371,922 samples, 0.81%)</title><rect x="1130.5" y="389" width="9.6" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1133.53" y="399.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (749,391 samples, 0.14%)</title><rect x="34.0" y="501" width="1.6" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="36.98" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_open (257,468,412 samples, 47.74%)</title><rect x="95.1" y="389" width="563.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="98.09" y="399.5" >__GI___libc_open</text>
</g>
<g >
<title>x64_sys_call (64,886,789 samples, 12.03%)</title><rect x="751.9" y="373" width="142.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="754.87" y="383.5" >x64_sys_call</text>
</g>
<g >
<title>std::locale::~locale (2,175,220 samples, 0.40%)</title><rect x="1175.6" y="485" width="4.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1178.61" y="495.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (93,850 samples, 0.02%)</title><rect x="33.8" y="453" width="0.2" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="36.78" y="463.5" ></text>
</g>
<g >
<title>__cpu_indicator_init (749,391 samples, 0.14%)</title><rect x="34.0" y="517" width="1.6" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="36.98" y="527.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (2,170,631 samples, 0.40%)</title><rect x="682.4" y="453" width="4.7" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="685.39" y="463.5" ></text>
</g>
<g >
<title>__x64_sys_close (1,669,364 samples, 0.31%)</title><rect x="748.2" y="373" width="3.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="751.22" y="383.5" ></text>
</g>
<g >
<title>try_to_unlazy (7,790,285 samples, 1.44%)</title><rect x="265.6" y="229" width="17.1" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="268.64" y="239.5" ></text>
</g>
<g >
<title>mntput (2,182,071 samples, 0.40%)</title><rect x="615.6" y="245" width="4.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="618.62" y="255.5" ></text>
</g>
<g >
<title>__split_vma (84,740 samples, 0.02%)</title><rect x="33.8" y="309" width="0.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="36.78" y="319.5" ></text>
</g>
<g >
<title>prepend_copy (1,726,945 samples, 0.32%)</title><rect x="488.6" y="69" width="3.8" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="491.64" y="79.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (2,171,117 samples, 0.40%)</title><rect x="893.9" y="421" width="4.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="896.85" y="431.5" ></text>
</g>
<g >
<title>kmem_cache_free (2,197,880 samples, 0.41%)</title><rect x="648.9" y="277" width="4.8" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="651.93" y="287.5" ></text>
</g>
<g >
<title>dquot_file_open (1,136,775 samples, 0.21%)</title><rect x="357.8" y="197" width="2.5" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="360.79" y="207.5" ></text>
</g>
<g >
<title>init_file (15,315,293 samples, 2.84%)</title><rect x="165.1" y="245" width="33.5" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="168.10" y="255.5" >in..</text>
</g>
<g >
<title>_dl_relocate_object (1,188,590 samples, 0.22%)</title><rect x="35.6" y="501" width="2.6" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="38.62" y="511.5" ></text>
</g>
<g >
<title>dput (3,243,897 samples, 0.60%)</title><rect x="1099.9" y="277" width="7.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1102.87" y="287.5" ></text>
</g>
<g >
<title>generic_file_open (2,183,751 samples, 0.40%)</title><rect x="369.8" y="197" width="4.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="372.83" y="207.5" ></text>
</g>
<g >
<title>__fsnotify_parent (9,675,037 samples, 1.79%)</title><rect x="995.3" y="309" width="21.2" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="998.31" y="319.5" ></text>
</g>
<g >
<title>should_failslab.constprop.0 (2,196,478 samples, 0.41%)</title><rect x="241.7" y="245" width="4.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="244.72" y="255.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (8,720,277 samples, 1.62%)</title><rect x="668.1" y="469" width="19.0" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="671.06" y="479.5" ></text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::close (94,442,570 samples, 17.51%)</title><rect x="691.9" y="485" width="206.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="694.95" y="495.5" >std::basic_ifstream&lt;char, s..</text>
</g>
<g >
<title>walk_component (4,366,843 samples, 0.81%)</title><rect x="577.4" y="245" width="9.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="580.37" y="255.5" ></text>
</g>
<g >
<title>dget_parent (4,367,927 samples, 0.81%)</title><rect x="780.6" y="293" width="9.6" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="783.61" y="303.5" ></text>
</g>
<g >
<title>wp_page_copy (416,038 samples, 0.08%)</title><rect x="37.3" y="373" width="0.9" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="40.31" y="383.5" ></text>
</g>
<g >
<title>apparmor_file_permission (4,377,740 samples, 0.81%)</title><rect x="1116.1" y="277" width="9.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1119.14" y="287.5" ></text>
</g>
<g >
<title>_dl_lookup_symbol_x (772,552 samples, 0.14%)</title><rect x="35.6" y="485" width="1.7" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="38.62" y="495.5" ></text>
</g>
<g >
<title>__fsnotify_parent (4,103,792 samples, 0.76%)</title><rect x="348.8" y="213" width="9.0" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="351.81" y="223.5" ></text>
</g>
<g >
<title>__aa_path_perm (15,015,043 samples, 2.78%)</title><rect x="412.9" y="165" width="32.8" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="415.86" y="175.5" >__..</text>
</g>
<g >
<title>dget_parent (6,988,932 samples, 1.30%)</title><rect x="1084.6" y="277" width="15.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1087.57" y="287.5" ></text>
</g>
<g >
<title>call_init.part.0 (749,391 samples, 0.14%)</title><rect x="34.0" y="533" width="1.6" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="36.98" y="543.5" ></text>
</g>
<g >
<title>[unknown] (10,961,206 samples, 2.03%)</title><rect x="10.0" y="565" width="24.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >[..</text>
</g>
<g >
<title>_dl_start_user (1,937,981 samples, 0.36%)</title><rect x="34.0" y="565" width="4.2" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="36.98" y="575.5" ></text>
</g>
<g >
<title>_raw_spin_unlock (2,181,885 samples, 0.40%)</title><rect x="879.5" y="325" width="4.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="882.47" y="335.5" ></text>
</g>
<g >
<title>tick_sched_handle (2,191,432 samples, 0.41%)</title><rect x="922.5" y="341" width="4.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="925.47" y="351.5" ></text>
</g>
<g >
<title>do_open (123,283,027 samples, 22.86%)</title><rect x="246.5" y="261" width="269.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="249.53" y="271.5" >do_open</text>
</g>
<g >
<title>ext4_file_read_iter (24,547,787 samples, 4.55%)</title><rect x="1016.5" y="309" width="53.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1019.48" y="319.5" >ext4_..</text>
</g>
<g >
<title>__mod_memcg_state (2,200,702 samples, 0.41%)</title><rect x="852.6" y="197" width="4.8" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="855.60" y="207.5" ></text>
</g>
<g >
<title>get_current_fs_domain (2,181,529 samples, 0.40%)</title><rect x="501.9" y="197" width="4.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="504.94" y="207.5" ></text>
</g>
<g >
<title>vma_interval_tree_remove (84,740 samples, 0.02%)</title><rect x="33.8" y="277" width="0.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="36.78" y="287.5" ></text>
</g>
<g >
<title>x64_sys_call (93,850 samples, 0.02%)</title><rect x="33.8" y="517" width="0.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="36.78" y="527.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (4,378,111 samples, 0.81%)</title><rect x="184.3" y="213" width="9.5" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="187.25" y="223.5" ></text>
</g>
<g >
<title>clear_page_erms (416,038 samples, 0.08%)</title><rect x="37.3" y="293" width="0.9" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="40.31" y="303.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (4,294,060 samples, 0.80%)</title><rect x="634.7" y="261" width="9.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="637.74" y="271.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (17,501,547 samples, 3.25%)</title><rect x="198.6" y="245" width="38.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="201.61" y="255.5" >kme..</text>
</g>
<g >
<title>__memcg_slab_post_alloc_hook (2,179,503 samples, 0.40%)</title><rect x="155.6" y="245" width="4.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="158.57" y="255.5" ></text>
</g>
<g >
<title>d_absolute_path (14,760,021 samples, 2.74%)</title><rect x="460.1" y="117" width="32.3" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="463.12" y="127.5" >d_..</text>
</g>
<g >
<title>getname_flags.part.0 (10,849,355 samples, 2.01%)</title><rect x="625.2" y="277" width="23.7" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="628.19" y="287.5" >g..</text>
</g>
<g >
<title>tick_sched_do_timer (2,185,156 samples, 0.41%)</title><rect x="506.7" y="85" width="4.8" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="509.72" y="95.5" ></text>
</g>
<g >
<title>consume_stock (2,199,811 samples, 0.41%)</title><rect x="232.1" y="197" width="4.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="235.09" y="207.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="517" width="4.8" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1188.19" y="527.5" ></text>
</g>
<g >
<title>lockref_get_not_zero (2,183,209 samples, 0.40%)</title><rect x="785.4" y="277" width="4.8" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="788.39" y="287.5" ></text>
</g>
<g >
<title>__GI__IO_un_link.part.0 (2,181,113 samples, 0.40%)</title><rect x="725.1" y="421" width="4.8" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="728.14" y="431.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open (276,964,502 samples, 51.36%)</title><rect x="62.0" y="469" width="606.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="65.02" y="479.5" >std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::open</text>
</g>
<g >
<title>__libc_start_main@@GLIBC_2.34 (524,170,649 samples, 97.20%)</title><rect x="38.2" y="549" width="1147.0" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="41.23" y="559.5" >__libc_start_main@@GLIBC_2.34</text>
</g>
<g >
<title>do_dentry_open (87,187,127 samples, 16.17%)</title><rect x="320.7" y="229" width="190.8" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="323.72" y="239.5" >do_dentry_open</text>
</g>
<g >
<title>_int_malloc (2,172,985 samples, 0.40%)</title><rect x="29.0" y="517" width="4.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="32.02" y="527.5" ></text>
</g>
<g >
<title>__legitimize_mnt (1,226,715 samples, 0.23%)</title><rect x="275.3" y="213" width="2.6" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="278.26" y="223.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (2,191,432 samples, 0.41%)</title><rect x="922.5" y="373" width="4.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="925.47" y="383.5" ></text>
</g>
<g >
<title>prepend_path (12,567,226 samples, 2.33%)</title><rect x="464.9" y="101" width="27.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="467.92" y="111.5" >p..</text>
</g>
<g >
<title>hrtimer_interrupt (2,185,156 samples, 0.41%)</title><rect x="506.7" y="133" width="4.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="509.72" y="143.5" ></text>
</g>
<g >
<title>_int_malloc (2,193,330 samples, 0.41%)</title><rect x="663.3" y="405" width="4.8" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="666.26" y="415.5" ></text>
</g>
<g >
<title>strncpy_from_user (2,190,266 samples, 0.41%)</title><rect x="644.1" y="261" width="4.8" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="647.14" y="271.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="485" width="0.9" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="40.31" y="495.5" ></text>
</g>
<g >
<title>std::ios_base::_M_init (2,180,068 samples, 0.40%)</title><rect x="677.6" y="453" width="4.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="680.62" y="463.5" ></text>
</g>
<g >
<title>std::locale::~locale (2,180,068 samples, 0.40%)</title><rect x="677.6" y="437" width="4.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="680.62" y="447.5" ></text>
</g>
<g >
<title>all (539,268,944 samples, 100%)</title><rect x="10.0" y="597" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>filemap_read (20,599,981 samples, 3.82%)</title><rect x="1025.1" y="277" width="45.1" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="1028.12" y="287.5" >file..</text>
</g>
<g >
<title>fsnotify (2,125,543 samples, 0.39%)</title><rect x="790.2" y="293" width="4.6" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="793.17" y="303.5" ></text>
</g>
<g >
<title>_IO_file_close (2,192,863 samples, 0.41%)</title><rect x="710.8" y="421" width="4.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="713.77" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64 (2,170,319 samples, 0.40%)</title><rect x="76.0" y="421" width="4.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="78.97" y="431.5" ></text>
</g>
<g >
<title>__rcu_read_lock (2,199,575 samples, 0.41%)</title><rect x="857.4" y="293" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="860.41" y="303.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,191,432 samples, 0.41%)</title><rect x="922.5" y="405" width="4.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="925.47" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="453" width="0.9" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="40.31" y="463.5" ></text>
</g>
<g >
<title>__memset (4,365,029 samples, 0.81%)</title><rect x="625.2" y="261" width="9.5" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="628.19" y="271.5" ></text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (4,369,578 samples, 0.81%)</title><rect x="668.1" y="453" width="9.5" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="671.06" y="463.5" ></text>
</g>
<g >
<title>do_sys_openat2 (240,042,811 samples, 44.51%)</title><rect x="128.5" y="309" width="525.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="131.49" y="319.5" >do_sys_openat2</text>
</g>
<g >
<title>open_last_lookups (2,177,460 samples, 0.40%)</title><rect x="591.7" y="261" width="4.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="594.73" y="271.5" ></text>
</g>
<g >
<title>operator new (2,193,330 samples, 0.41%)</title><rect x="663.3" y="437" width="4.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="666.26" y="447.5" ></text>
</g>
<g >
<title>__check_object_size (2,190,266 samples, 0.41%)</title><rect x="644.1" y="245" width="4.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="647.14" y="255.5" ></text>
</g>
<g >
<title>x64_sys_call (72,713,281 samples, 13.48%)</title><rect x="971.4" y="373" width="159.1" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="974.43" y="383.5" >x64_sys_call</text>
</g>
<g >
<title>is_vmalloc_addr (2,190,266 samples, 0.41%)</title><rect x="644.1" y="213" width="4.8" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="647.14" y="223.5" ></text>
</g>
<g >
<title>_IO_setb (2,194,882 samples, 0.41%)</title><rect x="720.3" y="421" width="4.8" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="723.33" y="431.5" ></text>
</g>
<g >
<title>rw_verify_area (27,573,429 samples, 5.11%)</title><rect x="1070.2" y="309" width="60.3" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="1073.20" y="319.5" >rw_ver..</text>
</g>
<g >
<title>vfs_open (89,376,267 samples, 16.57%)</title><rect x="320.7" y="245" width="195.6" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="323.72" y="255.5" >vfs_open</text>
</g>
<g >
<title>kmem_cache_free (22,080,238 samples, 4.09%)</title><rect x="809.1" y="309" width="48.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="812.10" y="319.5" >kmem..</text>
</g>
<g >
<title>__hrtimer_run_queues (2,185,156 samples, 0.41%)</title><rect x="506.7" y="117" width="4.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="509.72" y="127.5" ></text>
</g>
<g >
<title>aa_path_name (19,113,769 samples, 3.54%)</title><rect x="460.1" y="149" width="41.8" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="463.12" y="159.5" >aa_..</text>
</g>
<g >
<title>__rcu_read_lock (2,171,522 samples, 0.40%)</title><rect x="799.6" y="309" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="802.60" y="319.5" ></text>
</g>
<g >
<title>path_openat (216,731,635 samples, 40.19%)</title><rect x="146.2" y="277" width="474.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="149.16" y="287.5" >path_openat</text>
</g>
<g >
<title>try_charge_memcg (2,199,811 samples, 0.41%)</title><rect x="232.1" y="213" width="4.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="235.09" y="223.5" ></text>
</g>
<g >
<title>elf_load (84,740 samples, 0.02%)</title><rect x="33.8" y="389" width="0.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="36.78" y="399.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (6,565,112 samples, 1.22%)</title><rect x="222.5" y="229" width="14.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="225.54" y="239.5" ></text>
</g>
<g >
<title>__fput_sync (56,126,913 samples, 10.41%)</title><rect x="756.7" y="341" width="122.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="759.66" y="351.5" >__fput_sync</text>
</g>
<g >
<title>filemap_get_pages (4,378,082 samples, 0.81%)</title><rect x="1051.0" y="261" width="9.6" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="1054.03" y="271.5" ></text>
</g>
<g >
<title>irqentry_exit (1,394,394 samples, 0.26%)</title><rect x="1093.3" y="245" width="3.0" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1096.29" y="255.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,190,297 samples, 0.41%)</title><rect x="601.3" y="261" width="4.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="604.28" y="271.5" ></text>
</g>
<g >
<title>generic_file_read_iter (24,547,787 samples, 4.55%)</title><rect x="1016.5" y="293" width="53.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1019.48" y="303.5" >gener..</text>
</g>
<g >
<title>d_namespace_path.constprop.0 (14,760,021 samples, 2.74%)</title><rect x="460.1" y="133" width="32.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="463.12" y="143.5" >d_..</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::underflow (109,121,798 samples, 20.24%)</title><rect x="927.3" y="437" width="238.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="930.26" y="447.5" >std::basic_filebuf&lt;char, std::c..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (6,524,236 samples, 1.21%)</title><rect x="908.2" y="453" width="14.3" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="911.19" y="463.5" ></text>
</g>
<g >
<title>exc_page_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="469" width="0.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="40.31" y="479.5" ></text>
</g>
<g >
<title>__strchr_avx2 (2,186,747 samples, 0.41%)</title><rect x="658.5" y="405" width="4.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="661.47" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (86,729,764 samples, 16.08%)</title><rect x="950.3" y="405" width="189.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="953.32" y="415.5" >entry_SYSCALL_64_after_h..</text>
</g>
<g >
<title>file_close_fd (2,181,885 samples, 0.40%)</title><rect x="879.5" y="341" width="4.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="882.47" y="351.5" ></text>
</g>
<g >
<title>ext4_file_open (2,189,140 samples, 0.41%)</title><rect x="511.5" y="229" width="4.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="514.50" y="239.5" ></text>
</g>
<g >
<title>security_file_free (4,365,709 samples, 0.81%)</title><rect x="869.9" y="309" width="9.6" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="872.92" y="319.5" ></text>
</g>
<g >
<title>aa_label_is_subset (2,176,992 samples, 0.40%)</title><rect x="1121.0" y="245" width="4.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1123.96" y="255.5" ></text>
</g>
<g >
<title>do_vmi_align_munmap (84,740 samples, 0.02%)</title><rect x="33.8" y="325" width="0.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="36.78" y="335.5" ></text>
</g>
<g >
<title>putname (2,197,880 samples, 0.41%)</title><rect x="648.9" y="293" width="4.8" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="651.93" y="303.5" ></text>
</g>
<g >
<title>aa_str_perms (10,643,803 samples, 1.97%)</title><rect x="422.4" y="149" width="23.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="425.42" y="159.5" >a..</text>
</g>
<g >
<title>copy_page_to_iter (2,043,029 samples, 0.38%)</title><rect x="1046.6" y="261" width="4.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1049.56" y="271.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (122,206,988 samples, 22.66%)</title><rect x="903.4" y="469" width="267.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="906.41" y="479.5" >std::basic_filebuf&lt;char, std::char_..</text>
</g>
<g >
<title>obj_cgroup_uncharge (15,307,665 samples, 2.84%)</title><rect x="823.9" y="277" width="33.5" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="826.92" y="287.5" >ob..</text>
</g>
<g >
<title>tick_do_update_jiffies64 (2,185,156 samples, 0.41%)</title><rect x="506.7" y="69" width="4.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="509.72" y="79.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (909,862 samples, 0.17%)</title><rect x="1144.9" y="405" width="2.0" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1147.86" y="415.5" ></text>
</g>
<g >
<title>aa_get_buffer (2,201,319 samples, 0.41%)</title><rect x="445.7" y="165" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="448.71" y="175.5" ></text>
</g>
<g >
<title>__handle_mm_fault (749,391 samples, 0.14%)</title><rect x="34.0" y="437" width="1.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="36.98" y="447.5" ></text>
</g>
<g >
<title>tick_nohz_highres_handler (2,185,156 samples, 0.41%)</title><rect x="506.7" y="101" width="4.8" height="15.0" fill="rgb(215,50,11)" rx="2" ry="2" />
<text  x="509.72" y="111.5" ></text>
</g>
<g >
<title>_IO_file_open (259,656,256 samples, 48.15%)</title><rect x="90.3" y="405" width="568.2" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="93.31" y="415.5" >_IO_file_open</text>
</g>
<g >
<title>terminate_walk (4,371,115 samples, 0.81%)</title><rect x="610.8" y="261" width="9.6" height="15.0" fill="rgb(206,4,1)" rx="2" ry="2" />
<text  x="613.83" y="271.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (2,191,432 samples, 0.41%)</title><rect x="922.5" y="389" width="4.8" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="925.47" y="399.5" ></text>
</g>
<g >
<title>put_files_struct (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="469" width="4.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1188.19" y="479.5" ></text>
</g>
<g >
<title>memcg_account_kmem (2,185,918 samples, 0.41%)</title><rect x="227.3" y="213" width="4.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="230.31" y="223.5" ></text>
</g>
<g >
<title>__check_object_size.part.0 (2,190,266 samples, 0.41%)</title><rect x="644.1" y="229" width="4.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="647.14" y="239.5" ></text>
</g>
<g >
<title>_dl_start (1,188,590 samples, 0.22%)</title><rect x="35.6" y="549" width="2.6" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="38.62" y="559.5" ></text>
</g>
<g >
<title>ext4_file_open (7,688,583 samples, 1.43%)</title><rect x="357.8" y="213" width="16.8" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="360.79" y="223.5" ></text>
</g>
<g >
<title>__fsnotify_parent (4,378,097 samples, 0.81%)</title><rect x="384.1" y="197" width="9.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="387.13" y="207.5" ></text>
</g>
<g >
<title>fsnotify (1,907,815 samples, 0.35%)</title><rect x="353.6" y="197" width="4.2" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="356.61" y="207.5" ></text>
</g>
<g >
<title>__fput (56,126,913 samples, 10.41%)</title><rect x="756.7" y="325" width="122.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="759.66" y="335.5" >__fput</text>
</g>
<g >
<title>x64_sys_call (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="533" width="4.8" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1188.19" y="543.5" ></text>
</g>
<g >
<title>handle_dots (2,190,318 samples, 0.41%)</title><rect x="582.1" y="229" width="4.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="585.14" y="239.5" ></text>
</g>
<g >
<title>update_curr (2,191,432 samples, 0.41%)</title><rect x="922.5" y="277" width="4.8" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="925.47" y="287.5" ></text>
</g>
<g >
<title>obj_cgroup_uncharge_pages (15,307,665 samples, 2.84%)</title><rect x="823.9" y="245" width="33.5" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="826.92" y="255.5" >ob..</text>
</g>
<g >
<title>mntput (2,199,575 samples, 0.41%)</title><rect x="857.4" y="309" width="4.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="860.41" y="319.5" ></text>
</g>
<g >
<title>vfs_read (66,156,752 samples, 12.27%)</title><rect x="985.8" y="325" width="144.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="988.77" y="335.5" >vfs_read</text>
</g>
<g >
<title>security_file_open (58,209,736 samples, 10.79%)</title><rect x="384.1" y="213" width="127.4" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="387.13" y="223.5" >security_file_o..</text>
</g>
<g >
<title>ksys_read (72,713,281 samples, 13.48%)</title><rect x="971.4" y="341" width="159.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="974.43" y="351.5" >ksys_read</text>
</g>
<g >
<title>link_path_walk.part.0.constprop.0 (32,282,920 samples, 5.99%)</title><rect x="516.3" y="261" width="70.6" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="519.29" y="271.5" >link_pa..</text>
</g>
<g >
<title>get_unused_fd_flags (2,190,289 samples, 0.41%)</title><rect x="620.4" y="293" width="4.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="623.40" y="303.5" ></text>
</g>
<g >
<title>do_group_exit (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="501" width="4.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1188.19" y="511.5" ></text>
</g>
<g >
<title>refill_obj_stock (15,307,665 samples, 2.84%)</title><rect x="823.9" y="261" width="33.5" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="826.92" y="271.5" >re..</text>
</g>
<g >
<title>[unknown] (8,694,371 samples, 1.61%)</title><rect x="10.0" y="533" width="19.0" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>ktime_get_coarse_real_ts64 (2,190,945 samples, 0.41%)</title><rect x="1065.4" y="213" width="4.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="1068.40" y="223.5" ></text>
</g>
<g >
<title>entry_SYSRETQ_unsafe_stack (2,176,478 samples, 0.40%)</title><rect x="1140.1" y="405" width="4.8" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1143.10" y="415.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (93,850 samples, 0.02%)</title><rect x="33.8" y="485" width="0.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="36.78" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (74,923,029 samples, 13.89%)</title><rect x="729.9" y="405" width="164.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="732.91" y="415.5" >entry_SYSCALL_64_afte..</text>
</g>
<g >
<title>__mutex_init (2,173,388 samples, 0.40%)</title><rect x="160.3" y="245" width="4.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="163.34" y="255.5" ></text>
</g>
<g >
<title>scheduler_tick (2,191,432 samples, 0.41%)</title><rect x="922.5" y="309" width="4.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="925.47" y="319.5" ></text>
</g>
<g >
<title>__fsnotify_parent (13,059,254 samples, 2.42%)</title><rect x="771.0" y="309" width="28.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="774.03" y="319.5" >__..</text>
</g>
<g >
<title>alloc_empty_file (43,737,951 samples, 8.11%)</title><rect x="150.8" y="261" width="95.7" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="153.82" y="271.5" >alloc_empty..</text>
</g>
<g >
<title>std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ifstream (294,478,483 samples, 54.61%)</title><rect x="47.6" y="485" width="644.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="50.59" y="495.5" >std::basic_ifstream&lt;char, std::char_traits&lt;char&gt; &gt;::basic_ifstream</text>
</g>
<g >
<title>do_syscall_64 (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="549" width="4.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1188.19" y="559.5" ></text>
</g>
<g >
<title>obj_cgroup_charge (2,200,412 samples, 0.41%)</title><rect x="236.9" y="245" width="4.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="239.91" y="255.5" ></text>
</g>
<g >
<title>mod_memcg_state (2,185,918 samples, 0.41%)</title><rect x="227.3" y="197" width="4.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="230.31" y="207.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (2,191,432 samples, 0.41%)</title><rect x="922.5" y="437" width="4.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="925.47" y="447.5" ></text>
</g>
<g >
<title>memcg_account_kmem (4,366,699 samples, 0.81%)</title><rect x="847.9" y="229" width="9.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="850.86" y="239.5" ></text>
</g>
<g >
<title>dget_parent (6,563,980 samples, 1.22%)</title><rect x="1002.1" y="293" width="14.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1005.12" y="303.5" ></text>
</g>
<g >
<title>fsnotify (2,011,728 samples, 0.37%)</title><rect x="1107.0" y="277" width="4.4" height="15.0" fill="rgb(215,50,12)" rx="2" ry="2" />
<text  x="1109.97" y="287.5" ></text>
</g>
<g >
<title>do_filp_open (221,085,761 samples, 41.00%)</title><rect x="136.6" y="293" width="483.8" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="139.63" y="303.5" >do_filp_open</text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::basic_filebuf (2,202,213 samples, 0.41%)</title><rect x="57.2" y="469" width="4.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="60.20" y="479.5" ></text>
</g>
<g >
<title>complete_walk (12,174,565 samples, 2.26%)</title><rect x="256.0" y="245" width="26.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="259.04" y="255.5" >c..</text>
</g>
<g >
<title>load_elf_binary (93,850 samples, 0.02%)</title><rect x="33.8" y="405" width="0.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="36.78" y="415.5" ></text>
</g>
<g >
<title>do_filp_open (4,350,828 samples, 0.81%)</title><rect x="119.0" y="309" width="9.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="121.97" y="319.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,199,592 samples, 0.41%)</title><rect x="1125.7" y="293" width="4.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1128.72" y="303.5" ></text>
</g>
<g >
<title>percpu_counter_add_batch (3,516,428 samples, 0.65%)</title><rect x="862.2" y="309" width="7.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="865.22" y="319.5" ></text>
</g>
<g >
<title>vma_alloc_folio (416,038 samples, 0.08%)</title><rect x="37.3" y="357" width="0.9" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="40.31" y="367.5" ></text>
</g>
<g >
<title>x64_sys_call (248,720,151 samples, 46.12%)</title><rect x="114.2" y="341" width="544.3" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="117.24" y="351.5" >x64_sys_call</text>
</g>
<g >
<title>may_open (6,535,417 samples, 1.21%)</title><rect x="306.4" y="245" width="14.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="309.42" y="255.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,173,817 samples, 0.40%)</title><rect x="572.6" y="245" width="4.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="575.62" y="255.5" ></text>
</g>
<g >
<title>_dl_init (749,391 samples, 0.14%)</title><rect x="34.0" y="549" width="1.6" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="36.98" y="559.5" ></text>
</g>
<g >
<title>touch_atime (4,380,699 samples, 0.81%)</title><rect x="1060.6" y="261" width="9.6" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1063.61" y="271.5" ></text>
</g>
<g >
<title>hook_file_open (4,349,287 samples, 0.81%)</title><rect x="374.6" y="213" width="9.5" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="377.61" y="223.5" ></text>
</g>
<g >
<title>exec_binprm (93,850 samples, 0.02%)</title><rect x="33.8" y="437" width="0.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="36.78" y="447.5" ></text>
</g>
<g >
<title>copy_from_kernel_nofault (1,726,945 samples, 0.32%)</title><rect x="488.6" y="53" width="3.8" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="491.64" y="63.5" ></text>
</g>
<g >
<title>__vm_munmap (84,740 samples, 0.02%)</title><rect x="33.8" y="357" width="0.2" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="36.78" y="367.5" ></text>
</g>
<g >
<title>do_syscall_64 (253,084,030 samples, 46.93%)</title><rect x="104.7" y="357" width="553.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="107.69" y="367.5" >do_syscall_64</text>
</g>
<g >
<title>task_tick_fair (2,191,432 samples, 0.41%)</title><rect x="922.5" y="293" width="4.8" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="925.47" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_open (2,172,985 samples, 0.40%)</title><rect x="29.0" y="501" width="4.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="32.02" y="511.5" ></text>
</g>
<g >
<title>do_wp_page (416,038 samples, 0.08%)</title><rect x="37.3" y="389" width="0.9" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="40.31" y="399.5" ></text>
</g>
<g >
<title>filp_flush (2,198,355 samples, 0.41%)</title><rect x="884.2" y="341" width="4.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="887.25" y="351.5" ></text>
</g>
<g >
<title>alloc_pages_mpol (416,038 samples, 0.08%)</title><rect x="37.3" y="341" width="0.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="40.31" y="351.5" ></text>
</g>
<g >
<title>std::istream::read (124,401,299 samples, 23.07%)</title><rect x="903.4" y="485" width="272.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="906.41" y="495.5" >std::istream::read</text>
</g>
<g >
<title>__x64_sys_read (72,713,281 samples, 13.48%)</title><rect x="971.4" y="357" width="159.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="974.43" y="367.5" >__x64_sys_read</text>
</g>
<g >
<title>process_measurement (6,476,489 samples, 1.20%)</title><rect x="292.2" y="229" width="14.2" height="15.0" fill="rgb(207,13,3)" rx="2" ry="2" />
<text  x="295.25" y="239.5" ></text>
</g>
<g >
<title>srso_alias_safe_ret (2,185,156 samples, 0.41%)</title><rect x="506.7" y="197" width="4.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="509.72" y="207.5" ></text>
</g>
<g >
<title>do_exit (2,197,993 samples, 0.41%)</title><rect x="1185.2" y="485" width="4.8" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1188.19" y="495.5" ></text>
</g>
<g >
<title>read (8,694,371 samples, 1.61%)</title><rect x="10.0" y="501" width="19.0" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="13.00" y="511.5" ></text>
</g>
<g >
<title>cgroup_rstat_updated (2,200,702 samples, 0.41%)</title><rect x="852.6" y="181" width="4.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="855.60" y="191.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (2,185,156 samples, 0.41%)</title><rect x="506.7" y="149" width="4.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="509.72" y="159.5" ></text>
</g>
<g >
<title>handle_pte_fault (416,038 samples, 0.08%)</title><rect x="37.3" y="405" width="0.9" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="40.31" y="415.5" ></text>
</g>
<g >
<title>main (524,170,649 samples, 97.20%)</title><rect x="38.2" y="517" width="1147.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="41.23" y="527.5" >main</text>
</g>
<g >
<title>__alloc_pages (416,038 samples, 0.08%)</title><rect x="37.3" y="325" width="0.9" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="40.31" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (93,850 samples, 0.02%)</title><rect x="33.8" y="533" width="0.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="36.78" y="543.5" ></text>
</g>
<g >
<title>security_file_permission (6,559,294 samples, 1.22%)</title><rect x="1111.4" y="293" width="14.3" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1114.37" y="303.5" ></text>
</g>
<g >
<title>should_failslab.constprop.0 (2,182,935 samples, 0.40%)</title><rect x="193.8" y="213" width="4.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="196.83" y="223.5" ></text>
</g>
<g >
<title>malloc (2,193,330 samples, 0.41%)</title><rect x="663.3" y="421" width="4.8" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="666.26" y="431.5" ></text>
</g>
<g >
<title>__legitimize_path (2,192,802 samples, 0.41%)</title><rect x="260.8" y="229" width="4.8" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="263.84" y="239.5" ></text>
</g>
<g >
<title>current_time (2,190,945 samples, 0.41%)</title><rect x="1065.4" y="229" width="4.8" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="1068.40" y="239.5" ></text>
</g>
<g >
<title>mntput (2,195,674 samples, 0.41%)</title><rect x="586.9" y="261" width="4.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="589.93" y="271.5" ></text>
</g>
<g >
<title>io_latency_read (521,970,384 samples, 96.79%)</title><rect x="38.2" y="501" width="1142.2" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="41.23" y="511.5" >io_latency_read</text>
</g>
<g >
<title>__calc_delta.constprop.0 (2,191,432 samples, 0.41%)</title><rect x="922.5" y="261" width="4.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="925.47" y="271.5" ></text>
</g>
<g >
<title>aa_dfa_match (8,469,230 samples, 1.57%)</title><rect x="427.2" y="133" width="18.5" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="430.18" y="143.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (2,191,432 samples, 0.41%)</title><rect x="922.5" y="421" width="4.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="925.47" y="431.5" ></text>
</g>
<g >
<title>__memcg_slab_free_hook (19,906,587 samples, 3.69%)</title><rect x="813.9" y="293" width="43.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="816.85" y="303.5" >__me..</text>
</g>
<g >
<title>__fsnotify_parent (16,626,544 samples, 3.08%)</title><rect x="1075.0" y="293" width="36.4" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="1077.99" y="303.5" >__f..</text>
</g>
<g >
<title>get_unused_fd_flags (2,162,564 samples, 0.40%)</title><rect x="653.7" y="309" width="4.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="656.74" y="319.5" ></text>
</g>
<g >
<title>ioLatRead (539,267,829 samples, 100.00%)</title><rect x="10.0" y="581" width="1180.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >ioLatRead</text>
</g>
<g >
<title>__x64_sys_execve (93,850 samples, 0.02%)</title><rect x="33.8" y="501" width="0.2" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="36.78" y="511.5" ></text>
</g>
<g >
<title>atime_needs_update (4,380,699 samples, 0.81%)</title><rect x="1060.6" y="245" width="9.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1063.61" y="255.5" ></text>
</g>
</g>
</svg>
